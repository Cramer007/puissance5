#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>

// Codes de couleur ANSI
#define RESET   "\033[0m"
#define RED     "\033[31m"
#define YELLOW  "\033[33m"


class Case {
private:
    char contenu;

public:
    Case() : contenu(' ') {}

    char obtenirContenu() const {
        return contenu;
    }

    void placerPion(char symbole) {
        contenu = symbole;
    }

    std::string afficherContenu() const {
        if (contenu == 'X') return std::string(RED) + contenu + std::string(RESET);
        if (contenu == 'O') return std::string(YELLOW) + contenu + std::string(RESET);
        return std::string(1, contenu);
    }
};


class Joueur {
private:
    std::string nom;
    char symbole;
    bool estIA;

public:
    Joueur(const std::string& n, char s, bool ia = false) : nom(n), symbole(s), estIA(ia) {}

    char obtenirSymbole() const {
        return symbole;
    }

    std::string obtenirNom() const {
        return nom;
    }

    bool estUnIA() const {
        return estIA;
    }

    int choisirColonneAleatoire(int nbColonnes) const {
        return std::rand() % nbColonnes;
    }
};


class Plateau {
private:
    int lignes;
    int colonnes;
    std::vector<std::vector<Case>> plateau;

public:
    Plateau(int l, int c) : lignes(l), colonnes(c), plateau(l, std::vector<Case>(c)) {}

    void afficher() const {
        std::cout << "   ";
        for (int j = 0; j < colonnes; ++j) {
            std::cout << " " << j << "  ";
        }
        std::cout << "\n";

        for (int i = 0; i < lignes; ++i) {
            std::cout << i << " ";
            for (int j = 0; j < colonnes; ++j) {
                std::cout << "| " << plateau[i][j].afficherContenu() << " ";
            }
            std::cout << "|\n";
        }
    }

    bool caseEstVide(int ligne, int colonne) const {
        return plateau[ligne][colonne].obtenirContenu() == ' ';
    }

    bool placerPion(int colonne, char symbole) {
        for (int i = lignes - 1; i >= 0; --i) {
            if (caseEstVide(i, colonne)) {
                plateau[i][colonne].placerPion(symbole);
                return true;
            }
        }
        return false; // La colonne est pleine
    }

    int obtenirNbLignes() const {
        return lignes;
    }

    int obtenirNbColonnes() const {
        return colonnes;
    }

    bool verifierLigne(int ligne, int colonne, char symbole) const {
        int count = 0;
        for (int j = 0; j < colonnes; ++j) {
            if (plateau[ligne][j].obtenirContenu() == symbole) {
                count++;
                if (count == 5) return true;
            } else {
                count = 0;
            }
        }
        return false;
    }

    bool verifierColonne(int ligne, int colonne, char symbole) const {
        int count = 0;
        for (int i = 0; i < lignes; ++i) {
            if (plateau[i][colonne].obtenirContenu() == symbole) {
                count++;
                if (count == 5) return true;
            } else {
                count = 0;
            }
        }
        return false;
    }

    bool verifierDiagonale(int ligne, int colonne, char symbole) const {
        int count = 0;
        // Diagonale descendante gauche à droite
        for (int i = -4; i <= 4; ++i) {
            int x = ligne + i;
            int y = colonne + i;
            if (x >= 0 && x < lignes && y >= 0 && y < colonnes) {
                if (plateau[x][y].obtenirContenu() == symbole) {
                    count++;
                    if (count == 5) return true;
                } else {
                    count = 0;
                }
            }
        }
        count = 0;
        // Diagonale montante gauche à droite
        for (int i = -4; i <= 4; ++i) {
            int x = ligne - i;
            int y = colonne + i;
            if (x >= 0 && x < lignes && y >= 0 && y < colonnes) {
                if (plateau[x][y].obtenirContenu() == symbole) {
                    count++;
                    if (count == 5) return true;
                } else {
                    count = 0;
                }
            }
        }
        return false;
    }

    bool verifierVictoire(int ligne, int colonne, char symbole) const {
        return verifierLigne(ligne, colonne, symbole) || verifierColonne(ligne, colonne, symbole) || verifierDiagonale(ligne, colonne, symbole);
    }
};


class Jeu {
private:
    Plateau plateau;
    std::vector<Joueur> joueurs;
    int tour;
    Joueur* joueurCourant;

    bool estMouvementValide(int colonne) const {
        return colonne >= 0 && colonne < plateau.obtenirNbColonnes() && plateau.caseEstVide(0, colonne);
    }

    bool partieEstTerminee(int derniereLigne, int derniereColonne) const {
        return plateau.verifierVictoire(derniereLigne, derniereColonne, joueurCourant->obtenirSymbole());
    }

    void changerJoueur() {
        joueurCourant = &joueurs[(tour + 1) % joueurs.size()];
    }

public:
    Jeu(int lignes, int colonnes, const std::vector<Joueur>& js) : plateau(lignes, colonnes), joueurs(js), tour(0), joueurCourant(&joueurs[0]) {}

    void afficherInstructions() const {
        std::cout << "Bienvenue dans le jeu Puissance 5 !" << std::endl << std::endl;
        std::cout << "Le but du jeu est d'aligner 5 pions horizontalement, verticalement ou diagonalement." << std::endl;
        std::cout << "Chaque joueur place un pion à tour de rôle en choisissant une colonne." << std::endl;
        std::cout << "Les pions tombent vers le bas de la colonne choisie." << std::endl << std::endl;
        std::cout << "Amusez-vous bien !" << std::endl << std::endl;
    }

    void jouer() {
        afficherInstructions();
        while (true) {
            plateau.afficher();
            std::cout << std::endl; // Espace supplémentaire
            int colonne;

            if (joueurCourant->estUnIA()) {
                // Jouer pour l'IA
                do {
                    colonne = joueurCourant->choisirColonneAleatoire(plateau.obtenirNbColonnes());
                } while (!estMouvementValide(colonne));
                std::cout << "L'IA " << joueurCourant->obtenirNom() << " (" << joueurCourant->obtenirSymbole() << ") a choisi la colonne : " << colonne << std::endl;
            } else {
                // Jouer pour le joueur humain
                std::cout << "Joueur " << joueurCourant->obtenirNom() << " (" << joueurCourant->obtenirSymbole() << "), entrez la colonne : ";
                std::cin >> colonne;
                std::cout << std::endl; // Espace supplémentaire
                if (!estMouvementValide(colonne)) {
                    std::cout << "Mouvement invalide. Réessayez." << std::endl;
                    continue;
                }
            }

            // Trouve la ligne où le pion est placé
            int ligne = -1;
            for (int i = plateau.obtenirNbLignes() - 1; i >= 0; --i) {
                if (plateau.caseEstVide(i, colonne)) {
                    ligne = i;
                    break;
                }
            }

            plateau.placerPion(colonne, joueurCourant->obtenirSymbole());

            if (partieEstTerminee(ligne, colonne)) {
                plateau.afficher();
                std::cout << std::endl; // Espace supplémentaire
                std::cout << "Félicitations " << joueurCourant->obtenirNom() << " ! Vous avez gagné !" << std::endl;
                return;
            }

            changerJoueur();
            ++tour;
        }
    }
};

int main() {
    std::srand(std::time(0)); // Initialise le générateur de nombres aléatoires

    std::string nom1, nom2;
    char choixIA;
    bool ia = false;

    std::cout << "Entrez le nom du joueur 1 (X) : ";
    std::getline(std::cin, nom1);

    std::cout << "Voulez-vous jouer contre l'ordinateur ? (O/N) : ";
    std::cin >> choixIA;
    std::cin.ignore(); // Pour ignorer le retour à la ligne restant dans le buffer

    if (choixIA == 'O' || choixIA == 'o') {
        nom2 = "Ordinateur";
        ia = true;
    } else {
        std::cout << "Entrez le nom du joueur 2 (O) : ";
        std::getline(std::cin, nom2);
    }

    std::cout << std::endl; // Espace supplémentaire

    Joueur joueur1(nom1, 'X');
    Joueur joueur2(nom2, 'O', ia);
    std::vector<Joueur> joueurs = {joueur1, joueur2};
    Jeu jeu(6, 7, joueurs); // un plateau de 6x7
    jeu.jouer();
    return 0;
}
